import sys
import os
import logging

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ sys.path (–æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ) ---
# print("--- PYTHON SYS.PATH DIAGNOSTICS ---")
# for p_idx, p_val in enumerate(sys.path):
#     print(f"Path[{p_idx}]: {p_val}")
# print("--- END OF SYS.PATH ---")
# print(f"Current Working Directory: {os.getcwd()}")
# print(f"Script Path: {os.path.abspath(__file__)}")
# --- –ö–æ–Ω–µ—Ü –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---

import requests  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–∏
import json
import time
import base64
from pathlib import Path

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("runway_video_generator")

# --- –ò–º–ø–æ—Ä—Ç RunwayML SDK ---
RUNWAY_SDK_AVAILABLE = False
RunwayML = None
RunwayAPIError = Exception  # –û–±—â–∏–π fallback –¥–ª—è –æ—à–∏–±–æ–∫ API, –µ—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ—Ç—Å—è

try:
    logger.info("–ü–æ–ø—ã—Ç–∫–∞: import runwayml")
    import runwayml

    logger.info(
        f"–£–°–ü–ï–•: 'import runwayml'. –ú–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω –≤: {getattr(runwayml, '__file__', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")

    logger.info("–ü–æ–ø—ã—Ç–∫–∞: from runwayml import RunwayML")
    from runwayml import RunwayML

    logger.info("–£–°–ü–ï–•: 'from runwayml import RunwayML'.")

    # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤—ã–≤–æ–¥–µ dir() –∏–∑ 333.py
    if hasattr(runwayml, 'RunwayMLError'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ RunwayMLError (—Å –±–æ–ª—å—à–æ–π E)
        logger.info("–ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç 'RunwayMLError' –≤ –º–æ–¥—É–ª–µ 'runwayml'. –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞...")
        from runwayml import RunwayMLError  # <--- –ö–õ–Æ–ß–ï–í–û–ô –ò–ú–ü–û–†–¢ –ó–î–ï–°–¨

        RunwayAPIError = RunwayMLError
        logger.info("–£–°–ü–ï–•: 'from runwayml import RunwayMLError' –≤—ã–ø–æ–ª–Ω–µ–Ω, RunwayAPIError —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    elif hasattr(runwayml, 'APIError'):  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ RunwayMLError –Ω–µ—Ç
        logger.warning("'RunwayMLError' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 'APIError' –∏–∑ 'runwayml'...")
        from runwayml import APIError

        RunwayAPIError = APIError
        logger.info("–£–°–ü–ï–•: 'from runwayml import APIError' –≤—ã–ø–æ–ª–Ω–µ–Ω, RunwayAPIError —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        logger.warning(
            "–ù–∏ 'RunwayMLError', –Ω–∏ 'APIError' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã 'runwayml'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π Exception –¥–ª—è RunwayAPIError.")
        # RunwayAPIError —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ Exception –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    RUNWAY_SDK_AVAILABLE = True
    logger.info("RUNWAY_SDK_AVAILABLE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True.")

except ImportError as e:
    logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ runwayml: {e}", exc_info=True)
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RunwayML SDK –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install runwayml")
    # RUNWAY_SDK_AVAILABLE –æ—Å—Ç–∞–µ—Ç—Å—è False, RunwayML –æ—Å—Ç–∞–µ—Ç—Å—è None, RunwayAPIError –æ—Å—Ç–∞–µ—Ç—Å—è Exception
except Exception as e_other:
    logger.error(f"–ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ runwayml: {e_other}", exc_info=True)
    # RUNWAY_SDK_AVAILABLE –æ—Å—Ç–∞–µ—Ç—Å—è False, RunwayML –æ—Å—Ç–∞–µ—Ç—Å—è None, RunwayAPIError –æ—Å—Ç–∞–µ—Ç—Å—è Exception

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
# URL –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
INPUT_IMAGE_URL = "https://i.postimg.cc/TYkcMTkW/Gen4-373363102.png"

# –ü—Ä–æ–º–ø—Ç –¥–ª—è Runway (–∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ runway_baron_prompt)
RUNWAY_TEXT_PROMPT = """
Image of Baron Sarcasm at his desk, writing. Scene starts static for a moment.
He then slowly looks up from the letter, his gaze distant, a faint, knowing, slightly ironic smile forming on his face; his quill pen hovers above the paper.
His smile widens a little more. In the background, a ghostly, semi-transparent silhouette of an elderly lady (his grandmother) subtly nods approvingly, or her own smile brightens.
With a satisfied (silent) chuckle, the Baron looks back down at the letter and resumes writing with renewed energy. A very slow camera zoom out concludes the scene.

Maintain the warm, personal, nostalgic, and ironic atmosphere. The overall style should be cinematic, detailed, atmospheric, a blend of classic portraiture and subtle digital fantasy. Ensure textures, lighting, and character likeness are consistent with the initial detailed portrait. 16:9 aspect ratio.
"""

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Runway
RUNWAY_MODEL_NAME = "gen4_turbo"
VIDEO_DURATION_SECONDS = 10
ASPECT_RATIO = "1280:720"  # –ò–°–ü–†–ê–í–õ–ï–ù–û –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–æ—Å–∞
POLLING_INTERVAL_SECONDS = 20
MAX_POLLING_ATTEMPTS = 60
REQUEST_TIMEOUT_SECONDS = 60

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
OUTPUT_DIRECTORY = "zagruzki"
Path(OUTPUT_DIRECTORY).mkdir(parents=True, exist_ok=True)


def get_runway_api_key():
    """–ü–æ–ª—É—á–∞–µ—Ç API-–∫–ª—é—á Runway –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    api_key = os.getenv("RUNWAY_API_KEY")
    if not api_key:
        logger.critical("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è RUNWAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        raise ValueError("RUNWAY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    return api_key


def image_url_to_base64_data_uri(image_url: str) -> str | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ base64 data URI."""
    try:
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL: {image_url}")
        response = requests.get(image_url, timeout=REQUEST_TIMEOUT_SECONDS)
        response.raise_for_status()

        content_type = response.headers.get('content-type', 'image/png')
        if not content_type.startswith('image/'):
            logger.error(f"URL –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. Content-Type: {content_type}")
            return None

        base64_image = base64.b64encode(response.content).decode("utf-8")
        data_uri = f"data:{content_type};base64,{base64_image}"
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64 data URI.")
        return data_uri
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL {image_url}: {e}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64: {e}", exc_info=True)
        return None


def download_video(video_url: str, output_path: str) -> bool:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ."""
    try:
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å URL: {video_url} -> {output_path}")
        response = requests.get(video_url, stream=True, timeout=300)
        response.raise_for_status()
        with open(output_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ {video_url}: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}", exc_info=True)
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ."""
    logger.info(f"–ó–∞–ø—É—Å–∫ main(). RUNWAY_SDK_AVAILABLE: {RUNWAY_SDK_AVAILABLE}")
    if not RUNWAY_SDK_AVAILABLE:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ main(), —Ç–∞–∫ –∫–∞–∫ RunwayML SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (RUNWAY_SDK_AVAILABLE is False).")
        return

    logger.info("--- üé¨ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ RunwayML ---")

    try:
        api_key = get_runway_api_key()
    except ValueError:
        return

        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_data_uri = image_url_to_base64_data_uri(INPUT_IMAGE_URL)
    if not image_data_uri:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ RunwayML
    if RunwayML is None:
        logger.error("–ö–ª–∞—Å—Å RunwayML –Ω–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (RunwayML is None). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç.")
        return

    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ RunwayML SDK...")
        client = RunwayML(api_key=api_key)
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç RunwayML SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ RunwayML: {e}", exc_info=True)
        return

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    generation_params = {
        "model": RUNWAY_MODEL_NAME,
        "prompt_image": image_data_uri,
        "prompt_text": RUNWAY_TEXT_PROMPT.strip(),
        "duration": VIDEO_DURATION_SECONDS,
        "ratio": ASPECT_RATIO  # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "1280:720"
    }

    task_id = None
    try:
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ RunwayML Image-to-Video...")
        log_params_preview = {k: (v[:70] + '...' if isinstance(v, str) and len(v) > 70 else v) for k, v in
                              generation_params.items()}
        logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Runway: {json.dumps(log_params_preview, indent=2)}")

        task = client.image_to_video.create(**generation_params)
        task_id = getattr(task, 'id', None)
        if not task_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏ –æ—Ç Runway.")
            logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Runway (create task): {task}")
            return
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ Runway —Å–æ–∑–¥–∞–Ω–∞! ID: {task_id}")

    except RunwayAPIError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ SDK Runway –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
        return
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ Runway: {e}", exc_info=True)
        return

    # 4. –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    logger.info(f"‚è≥ –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ Runway {task_id}...")
    final_video_url = None

    for attempt in range(MAX_POLLING_ATTEMPTS):
        try:
            task_status = client.tasks.retrieve(task_id)
            current_status = getattr(task_status, 'status', 'UNKNOWN').upper()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_POLLING_ATTEMPTS}. –°—Ç–∞—Ç—É—Å Runway {task_id}: {current_status}")

            if current_status == "SUCCEEDED":
                logger.info(f"üéâ –ó–∞–¥–∞—á–∞ Runway {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                task_output = getattr(task_status, 'output', None)

                if isinstance(task_output, list) and len(task_output) > 0 and isinstance(task_output[0], str):
                    final_video_url = task_output[0]
                elif isinstance(task_output, dict) and task_output.get('url'):
                    final_video_url = task_output['url']
                elif isinstance(task_output, str) and task_output.startswith('http'):
                    final_video_url = task_output

                if final_video_url:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω URL –≤–∏–¥–µ–æ: {final_video_url}")
                else:
                    logger.warning(f"–°—Ç–∞—Ç—É—Å SUCCEEDED, –Ω–æ URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {task_output}")
                break

            elif current_status == "FAILED":
                logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ Runway {task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (FAILED)!")
                error_details = getattr(task_status, 'error_message', '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.')
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Runway: {error_details}")
                logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {task_status}")
                break

            elif current_status in ["PENDING", "PROCESSING", "QUEUED", "WAITING", "RUNNING"]:
                time.sleep(POLLING_INTERVAL_SECONDS)
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å Runway: {current_status}. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")
                logger.debug(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞: {task_status}")
                break

        except RunwayAPIError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SDK Runway –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}", exc_info=True)
            break
        except Exception as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ Runway {task_id}: {e}", exc_info=True)
            break
    else:
        logger.warning(
            f"‚è∞ –¢–∞–π–º–∞—É—Ç ({MAX_POLLING_ATTEMPTS * POLLING_INTERVAL_SECONDS} —Å–µ–∫) –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ Runway {task_id}.")

    # 5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    if final_video_url:
        timestamp = time.strftime("%Y%m%d-%H%M%S")
        output_filename = f"baron_video_{task_id}_{timestamp}.mp4"
        output_path = Path(OUTPUT_DIRECTORY) / output_filename
        if not download_video(final_video_url, str(output_path)):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ. URL: {final_video_url}")
        else:
            logger.info(f"üéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–∫–∞—á–∞–Ω–æ: {output_path}")
    else:
        logger.error("–§–∏–Ω–∞–ª—å–Ω—ã–π URL –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

    logger.info("--- ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ ---")


if __name__ == "__main__":
    logger.info(
        f"–ó–∞–ø—É—Å–∫ –±–ª–æ–∫–∞ if __name__ == '__main__'. RunwayML –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {RunwayML}, RUNWAY_SDK_AVAILABLE: {RUNWAY_SDK_AVAILABLE}")
    if RunwayML is None or not RUNWAY_SDK_AVAILABLE:
        if not RUNWAY_SDK_AVAILABLE:
            print(
                "RunwayML SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install runwayml")
        else:
            print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: RunwayML SDK –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π, –Ω–æ RunwayML is None.")
    else:
        main()
