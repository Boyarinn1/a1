import os
import json
import requests
import subprocess

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

print(f"üìÇ DOWNLOAD_DIR –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π: {os.listdir(DOWNLOAD_DIR) if os.path.exists(DOWNLOAD_DIR) else '‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")


def find_json_mp4_pairs():
    """–ò—â–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞—Ä—É —Ñ–∞–π–ª–æ–≤ (JSON + MP4) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    files = os.listdir(DOWNLOAD_DIR)
    json_files = {f[:-5] for f in files if f.endswith(".json")}
    mp4_files = {f[:-4] for f in files if f.endswith(".mp4")}
    pairs = list(json_files & mp4_files)

    if not pairs:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–µ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤! –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.")
        return None

    return pairs[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞—Ä—É

def restore_files_from_artifacts():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π."""
    print("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π...")
    subprocess.run(["gh", "run", "download", "--name", "downloaded_files", "--dir", DOWNLOAD_DIR], check=False)
    print(f"‚úÖ –§–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ {DOWNLOAD_DIR}")


def load_json_data(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-–¥–∞–Ω–Ω—ã–µ."""
    json_path = os.path.join(DOWNLOAD_DIR, f"{filename}.json")
    try:
        with open(json_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON {json_path}: {e}")
        return None


def send_message(bot_token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
    response = requests.post(f"https://api.telegram.org/bot{bot_token}/sendMessage", json=payload)
    print(f"üì© –û—Ç–≤–µ—Ç Telegram API: {response.status_code} {response.json()}")


def main():
    
    restore_files_from_artifacts()
    pair = find_json_mp4_pairs()
    if not pair:
        return

    pair = find_json_mp4_pairs()
    if not pair:
        return

    post_data = load_json_data(pair)
    if not post_data:
        return

    message = f"üèõ {post_data.get('topic', {}).get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n\n{post_data.get('text_initial', {}).get('content', '‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}"
    send_message(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, message)

    print(f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è {pair}.json –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    # ‚úÖ –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º module1_preparation.py
    print("üöÄ –ó–∞–ø—É—Å–∫ module1_preparation.py –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤...")
    subprocess.run(["python", "scripts/module1_preparation.py"], check=True)


if __name__ == "__main__":
    main()
