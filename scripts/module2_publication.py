import os
import json
import requests

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # –î–µ–ª–∞–µ–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ module1_preparation.py


DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")  # –ü—Ä—è–º–æ–π –ø—É—Ç—å –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–≤–µ—Ä—Ö


print(f"üìÇ DOWNLOAD_DIR: {DOWNLOAD_DIR}")
print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {os.listdir(DOWNLOAD_DIR) if os.path.exists(DOWNLOAD_DIR) else '–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
print(f"üìç –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")


# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")


def find_json_mp4_pairs():
    """–ò—â–µ—Ç –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (.json –∏ .mp4)"""
    files = os.listdir(DOWNLOAD_DIR)
    json_files = {f[:-5] for f in files if f.endswith(".json")}
    mp4_files = {f[:-4] for f in files if f.endswith(".mp4")}
    return list(json_files & mp4_files)


def load_json_data(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    json_path = os.path.join(DOWNLOAD_DIR, f"{filename}.json")
    try:
        with open(json_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON {json_path}: {e}")
        return None


def format_message(post_data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ."""
    topic = post_data.get("topic", {}).get("topic", "üöÄ –ë–µ–∑ —Ç–µ–º—ã").strip()

    content = post_data.get("text_initial", {}).get("content", "").strip()
    sarcasm = post_data.get("sarcasm", {}).get("comment", "").strip()

    if topic.startswith('"') and topic.endswith('"'):
        topic = topic[1:-1]
    if sarcasm.startswith('"') and sarcasm.endswith('"'):
        sarcasm = sarcasm[1:-1]
    if not content:
        content = "‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    return f"""üèõ <b>{topic}</b>\n\n{content}\n\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\nüé≠ <i>{sarcasm}</i>"""


def extract_poll(post_data):
    raw_poll = post_data.get("sarcasm", {}).get("poll", "").strip()
    if not raw_poll:
        print("‚ùå –û–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON!")
        return None
    try:
        raw_poll = raw_poll.replace("'", '"')
        poll_json = json.loads(f"{{{raw_poll}}}")
        question = poll_json.get("question", "")
        options = poll_json.get("options", [])
        if not question or len(options) < 2 or len(options) > 10:
            print(f"‚ùå –û—à–∏–±–∫–∞: –û–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! (question={question}, options={options})")
            return None
        return {"question": question, "options": options}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ poll: {e}\n–ò—Å—Ö–æ–¥–Ω—ã–π poll: {raw_poll}")
        return None


def send_message(bot_token, chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª."""
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
    response = requests.post(f"https://api.telegram.org/bot{bot_token}/sendMessage", json=payload)
    response_json = response.json()

    if response_json.get("ok") and response_json["result"].get("sender_chat", {}).get("title") == "1":
        print("‚ö†Ô∏è Telegram –ø—Ä–∏—Å–≤–æ–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ '1', –Ω–æ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

    print(f"üì© –û—Ç–≤–µ—Ç Telegram API (—Å–æ–æ–±—â–µ–Ω–∏–µ): {response.status_code} {response_json}")
    return response


def send_poll(bot_token, chat_id, poll_question, poll_options):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ä–æ—Å –≤ Telegram."""
    payload = {
        "chat_id": chat_id,
        "question": poll_question,
        "options": poll_options,
        "is_anonymous": True,
        "type": "regular"
    }
    response = requests.post(f"https://api.telegram.org/bot{bot_token}/sendPoll", json=payload)
    print(f"üì© –û—Ç–≤–µ—Ç Telegram API (–æ–ø—Ä–æ—Å): {response.status_code} {response.json()}")
    return response


def main():

    # üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø—É—Ç–µ–π
    print(f"üìÇ BASE_DIR –≤ module2: {BASE_DIR}")
    print(f"üìÇ DOWNLOAD_DIR –≤ module2: {DOWNLOAD_DIR}")
    print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –≤ module2: {os.listdir(DOWNLOAD_DIR) if os.path.exists(DOWNLOAD_DIR) else '‚ùå –ü–∞–ø–∫–∏ –Ω–µ—Ç'}")

    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return

    pairs = find_json_mp4_pairs()
    if not pairs:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ .json + .mp4. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        return

    for filename in pairs:
        post_data = load_json_data(filename)
        if not post_data:
            continue

        message = format_message(post_data)
        send_message(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, message)

        poll_data = extract_poll(post_data)
        if poll_data:
            send_poll(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, poll_data["question"], poll_data["options"])


if __name__ == "__main__":
    main()
