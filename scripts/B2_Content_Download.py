#!/usr/bin/env python3
import os
import json
import asyncio
import shutil
import re
from typing import Set, List, Tuple, Any # –î–æ–±–∞–≤–ª–µ–Ω Any
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Telegram API
from telegram import Bot, InputMediaPhoto, InputMediaVideo
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è B2 SDK –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
import b2sdk.v2
from b2sdk.v2.exception import FileNotPresent, B2Error

# ------------------------------------------------------------
# 1) –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ------------------------------------------------------------
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'production', –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å —Å–∞—Ä–∫–∞–∑–º–∞ (–ø–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥, —Ç.–∫. –Ω–µ—Ç ConfigManager)
SARCASM_SUFFIX = "_sarcasm.png"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([
    S3_KEY_ID,
    S3_APPLICATION_KEY,
    S3_BUCKET_NAME,
    TELEGRAM_TOKEN,
    TELEGRAM_CHAT_ID
]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# ------------------------------------------------------------
# 2) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏, –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –∏ B2 SDK
# ------------------------------------------------------------
BASE_DIR = os.path.dirname(__file__)
DOWNLOAD_DIR = os.path.join(BASE_DIR, "downloaded")
PROCESSED_DIR = os.path.join(DOWNLOAD_DIR, "processed")
ERROR_DIR = os.path.join(DOWNLOAD_DIR, "errors")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
try:
    bot = Bot(token=TELEGRAM_TOKEN)
    print("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è B2 API
try:
    print("‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Backblaze B2...")
    info = b2sdk.v2.InMemoryAccountInfo()
    b2_api = b2sdk.v2.B2Api(info)
    b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)
    bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2 –±–∞–∫–µ—Ç—É: {S3_BUCKET_NAME}")
except Exception as e:
    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ B2: {e}")

# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å config_public.json (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö)
# ------------------------------------------------------------
def load_published_ids() -> Set[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ config/config_public.json –≤ B2.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç set —Å ID. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π set.
    """
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")
    config_key = "config/config_public.json"
    published_ids = set()
    try:
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å {config_key} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö ID...")
        os.makedirs(os.path.dirname(local_config_path), exist_ok=True)
        bucket.download_file_by_name(config_key).save_to(local_config_path)
        with open(local_config_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        published = data.get("generation_id", [])
        if isinstance(published, list):
             published_ids = set(published)
             print(f"‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(published_ids)} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö ID –∏–∑ {config_key}.")
        else:
             print(f"‚ö†Ô∏è –ü–æ–ª–µ 'generation_id' –≤ {config_key} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        os.remove(local_config_path)
    except FileNotPresent:
         print(f"‚ö†Ô∏è –§–∞–π–ª {config_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ B2. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
    except json.JSONDecodeError as e:
         print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {config_key}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
         if os.path.exists(local_config_path): os.remove(local_config_path)
    except B2Error as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ B2 SDK –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {config_key}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        if os.path.exists(local_config_path): os.remove(local_config_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å {config_key}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        if os.path.exists(local_config_path): os.remove(local_config_path)
    return published_ids

def save_published_ids(pub_ids: Set[str]):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö ID –≤ config_public.json –ª–æ–∫–∞–ª—å–Ω–æ
    –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ B2.
    """
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")
    config_key = "config/config_public.json"
    try:
        data = {"generation_id": sorted(list(pub_ids))}
        os.makedirs(os.path.dirname(local_config_path), exist_ok=True)
        with open(local_config_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print(f"üíæ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID –≤ {local_config_path}")
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π {config_key} –≤ B2...")
        bucket.upload_local_file(local_config_path, config_key)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω {config_key} –≤ B2. –í—Å–µ–≥–æ ID: {len(pub_ids)}")
        os.remove(local_config_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å {config_key}: {e}")
        if os.path.exists(local_config_path):
            try:
                os.remove(local_config_path)
            except Exception as rm_err:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_config_path}: {rm_err}")

# ------------------------------------------------------------
# 3) –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
# ------------------------------------------------------------
def remove_system_phrases(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ("–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:" –∏ —Ç.–ø.)
    –∏ –∑–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏.
    """
    if not isinstance(text, str):
        return ""
    system_phrases = [
        "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:",
        "üî•–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "üìö–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", "üîç–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
    ]
    clean_text = text
    for phrase in system_phrases:
        clean_text = re.sub(r'^\s*' + re.escape(phrase) + r'\s*\n?', '', clean_text, flags=re.IGNORECASE | re.MULTILINE).strip()
        clean_text = re.sub(r'\n\s*' + re.escape(phrase) + r'\s*', '\n', clean_text, flags=re.IGNORECASE).strip()
    clean_text = re.sub(r"\n\s*\n+", "\n\n", clean_text)
    return clean_text.strip()

# ------------------------------------------------------------
# 4) –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ generation_id (–ê–ª—å–±–æ–º: –§–æ—Ç–æ + –í–∏–¥–µ–æ, –û—Ç–¥–µ–ª—å–Ω–æ: –°–∞—Ä–∫–∞–∑–º + –û–ø—Ä–æ—Å) - –ò–ó–ú–ï–ù–ï–ù–ê
# ------------------------------------------------------------
async def publish_generation_id(gen_id: str, folder: str, published_ids: Set[str]) -> bool:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç JSON, PNG, Video –∏ Sarcasm PNG.
    –ï—Å–ª–∏ –≤—Å–µ 4 —Ñ–∞–π–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ú–ï–î–ò–ê–ì–†–£–ü–ü–£ (–§–æ—Ç–æ + –í–∏–¥–µ–æ) —Å –ø–æ–¥–ø–∏—Å—å—é —É –ø–µ—Ä–≤–æ–≥–æ –§–æ—Ç–æ.
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–ê–†–ö–ê–ó–ú –§–û–¢–û –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    3. –ñ–¥–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É.
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –û–ü–†–û–° (–µ—Å–ª–∏ –µ—Å—Ç—å).
    –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ 4 —Ñ–∞–π–ª–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ü–û–õ–ù–û–°–¢–¨–Æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∏ —Ñ–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False.
    """
    print(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º gen_id: {gen_id} –∏–∑ –ø–∞–ø–∫–∏ {folder}")
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–∏
    json_file_key = f"{folder}{gen_id}.json"
    video_file_key = f"{folder}{gen_id}.mp4"
    png_file_key = f"{folder}{gen_id}.png"
    sarcasm_png_file_key = f"{folder}{gen_id}{SARCASM_SUFFIX}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    local_json_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}.json")
    local_video_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}.mp4")
    local_png_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}.png")
    local_sarcasm_png_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}{SARCASM_SUFFIX}")

    # –§–ª–∞–≥–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    json_downloaded = False
    video_downloaded = False
    png_downloaded = False
    sarcasm_png_downloaded = False

    local_files_to_clean = [local_json_path, local_video_path, local_png_path, local_sarcasm_png_path]

    def cleanup_local_files():
        for file_path in local_files_to_clean:
            if os.path.exists(file_path):
                try: os.remove(file_path)
                except Exception as e: print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

    # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
    try:
        # 1. JSON
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º JSON: {json_file_key} -> {local_json_path}")
        os.makedirs(os.path.dirname(local_json_path), exist_ok=True)
        bucket.download_file_by_name(json_file_key).save_to(local_json_path)
        json_downloaded = True
        print(f"‚úÖ JSON —Å–∫–∞—á–∞–Ω: {local_json_path}")
        # 2. PNG
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å PNG: {png_file_key} -> {local_png_path}")
        os.makedirs(os.path.dirname(local_png_path), exist_ok=True)
        bucket.download_file_by_name(png_file_key).save_to(local_png_path)
        png_downloaded = True
        print(f"‚úÖ PNG —Å–∫–∞—á–∞–Ω: {local_png_path}")
        # 3. Video
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {video_file_key} -> {local_video_path}")
        os.makedirs(os.path.dirname(local_video_path), exist_ok=True)
        bucket.download_file_by_name(video_file_key).save_to(local_video_path)
        video_downloaded = True
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {local_video_path}")
        # 4. Sarcasm PNG
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å Sarcasm PNG: {sarcasm_png_file_key} -> {local_sarcasm_png_path}")
        os.makedirs(os.path.dirname(local_sarcasm_png_path), exist_ok=True)
        bucket.download_file_by_name(sarcasm_png_file_key).save_to(local_sarcasm_png_path)
        sarcasm_png_downloaded = True
        print(f"‚úÖ Sarcasm PNG —Å–∫–∞—á–∞–Ω: {local_sarcasm_png_path}")

    # *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ ***
    except FileNotPresent as e:
        missing_file_key = ""
        if not json_downloaded: missing_file_key = json_file_key
        elif not png_downloaded: missing_file_key = png_file_key
        elif not video_downloaded: missing_file_key = video_file_key
        elif not sarcasm_png_downloaded: missing_file_key = sarcasm_png_file_key
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {gen_id} –Ω–µ–ø–æ–ª–Ω–∞—è ({missing_file_key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç). –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        cleanup_local_files()
        return False
    # *** –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ***
    except B2Error as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ B2 SDK –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {gen_id}: {e}")
        cleanup_local_files()
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {gen_id}: {e}")
        cleanup_local_files()
        return False

    # --- –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–õ–ù–û–¢–£ –ì–†–£–ü–ü–´ (–í–°–ï 4 –§–ê–ô–õ–ê) ---
    if not (json_downloaded and png_downloaded and video_downloaded and sarcasm_png_downloaded):
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {gen_id} –Ω–µ–ø–æ–ª–Ω–∞—è (JSON:{json_downloaded}, PNG:{png_downloaded}, –í–∏–¥–µ–æ:{video_downloaded}, Sarcasm:{sarcasm_png_downloaded}). –ü—Ä–æ–ø—É—Å–∫.")
        cleanup_local_files()
        return False

    print(f"‚úÖ –í—Å–µ 4 —Ñ–∞–π–ª–∞ –¥–ª—è {gen_id} –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É...")
    caption_text = ""
    poll_question = ""
    poll_options = []
    json_processed_successfully = False
    album_sent = False
    sarcasm_photo_sent = False # –ù–æ–≤—ã–π —Ñ–ª–∞–≥
    poll_sent = False
    success = False

    try:
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON ---
        with open(local_json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        # --- –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–û–î–ü–ò–°–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        content_value = data.get("content")
        possible_text_keys = ["—Ç–µ–∫—Å—Ç", "content", "text"]
        found_text = None
        content_data = None
        if isinstance(content_value, dict): content_data = content_value
        elif isinstance(content_value, str) and content_value.strip():
            try: content_data = json.loads(content_value.strip())
            except json.JSONDecodeError: found_text = content_value.strip() if content_value.strip() not in ["{}"] else None
            except Exception as e: print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 'content' {gen_id}: {e}")
        if content_data is not None:
            post_list = content_data.get("post")
            if isinstance(post_list, list):
                post_texts = [list(item.values())[0] for item in post_list if isinstance(item, dict) and len(item) == 1]
                if post_texts: found_text = "\n\n".join(filter(None, post_texts))
            if found_text is None:
                for key in possible_text_keys:
                    if key in content_data: found_text = content_data[key]; break
        caption_text = found_text.strip() if isinstance(found_text, str) else ""
        caption_text = remove_system_phrases(caption_text)
        caption_text = re.sub(r'(?<!\n)\n(?!\n)', '\n\n', caption_text)
        if len(caption_text) > 1024: caption_text = caption_text[:1020] + "..."
        print(f"DEBUG: –ü–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ: '{caption_text[:50]}...'")

        # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        sarcasm_data = data.get("sarcasm", {})
        poll_data = sarcasm_data.get("poll", {})
        poll_question = poll_data.get("question", "").strip()[:300]
        poll_options = [str(opt).strip()[:100] for opt in poll_data.get("options", []) if str(opt).strip()][:10]
        print(f"DEBUG: –û–ø—Ä–æ—Å: Q='{poll_question}', Opts={poll_options}")

        json_processed_successfully = True

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
        os.makedirs(PROCESSED_DIR, exist_ok=True)
        png_file_handle = None
        video_file_handle = None
        sarcasm_png_file_handle = None

        # 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–§–æ—Ç–æ + –í–∏–¥–µ–æ)
        try:
            media_items = []
            current_caption = caption_text
            # 1.1 –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ –ü–ï–†–í–´–ú —Å –ø–æ–¥–ø–∏—Å—å—é
            png_file_handle = open(local_png_path, "rb")
            media_items.append(InputMediaPhoto(png_file_handle, caption=current_caption, parse_mode="HTML"))
            print(f"‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ PNG –ü–ï–†–í–´–ú –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (—Å –ø–æ–¥–ø–∏—Å—å—é).")
            # 1.2 –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –í–¢–û–†–´–ú –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
            video_file_handle = open(local_video_path, "rb")
            media_items.append(InputMediaVideo(video_file_handle, caption="", parse_mode="HTML", supports_streaming=True))
            print(f"‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ MP4 –í–¢–û–†–´–ú –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏).")

            print(f"‚úàÔ∏è –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É ({len(media_items)} —ç–ª–µ–º–µ–Ω—Ç–∞) –¥–ª—è {gen_id}...")
            await bot.send_media_group(
                chat_id=TELEGRAM_CHAT_ID, media=media_items,
                read_timeout=120, connect_timeout=120, write_timeout=120
            )
            album_sent = True
            print(f"‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ (–§–æ—Ç–æ+–í–∏–¥–µ–æ) –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è {gen_id}: {e}")
            success = False
            raise # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ —É—à–µ–ª
        finally:
            if png_file_handle: png_file_handle.close()
            if video_file_handle: video_file_handle.close()

        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞
        if album_sent: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–ª—å–±–æ–º —É—à–µ–ª
            try:
                print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞ –¥–ª—è {gen_id}...")
                sarcasm_png_file_handle = open(local_sarcasm_png_path, "rb")
                await bot.send_photo(
                    chat_id=TELEGRAM_CHAT_ID,
                    photo=sarcasm_png_file_handle,
                    read_timeout=60, connect_timeout=60, write_timeout=60
                )
                sarcasm_photo_sent = True
                print(f"‚úÖ –§–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞ –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception as e:
                 print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞ –¥–ª—è {gen_id}: {e}")
            finally:
                 if sarcasm_png_file_handle: sarcasm_png_file_handle.close()

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–µ–Ω
        if album_sent: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–ª—å–±–æ–º —É—à–µ–ª
            print("‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ–ø—Ä–æ—Å–∞...")
            await asyncio.sleep(1)

            if poll_question and len(poll_options) >= 2:
                poll_question_formatted = f"üé≠ {poll_question}"
                try:
                    print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –¥–ª—è {gen_id}...")
                    await bot.send_poll(
                        chat_id=TELEGRAM_CHAT_ID, question=poll_question_formatted,
                        options=poll_options, is_anonymous=True
                    )
                    poll_sent = True
                    print(f"‚úÖ –û–ø—Ä–æ—Å –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è {gen_id}: {e}")
            else:
                 print("DEBUG: –û–ø—Ä–æ—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")

        # –°—á–∏—Ç–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ —É—à–µ–ª –∞–ª—å–±–æ–º –∏ —Ñ–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞
        if album_sent and sarcasm_photo_sent:
             success = True

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON {local_json_path}: {e}")
        os.makedirs(ERROR_DIR, exist_ok=True)
        try: shutil.move(local_json_path, os.path.join(ERROR_DIR, os.path.basename(local_json_path)))
        except Exception as move_err: print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON: {move_err}")
        success = False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ/–æ—Ç–ø—Ä–∞–≤–∫–µ {gen_id}: {e}")
        success = False

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
    if success: # –£—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ê–õ–¨–ë–û–ú–ê –∏ –§–û–¢–û –°–ê–†–ö–ê–ó–ú–ê
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {gen_id}.")
        published_ids.add(gen_id)
        save_published_ids(published_ids)
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ 4 —Ñ–∞–π–ª–∞ –≤ processed
        for file_path in local_files_to_clean:
            if os.path.exists(file_path):
                try:
                    destination_path = os.path.join(PROCESSED_DIR, os.path.basename(file_path))
                    shutil.move(file_path, destination_path)
                    print(f"  üìÅ –§–∞–π–ª {os.path.basename(file_path)} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {PROCESSED_DIR}")
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª {os.path.basename(file_path)} –≤ processed: {e}")
    else:
        print(f"‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è {gen_id} –ù–ï –£–î–ê–õ–ê–°–¨ –∏–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. ID –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ.")
        if json_processed_successfully:
             print(f"   (–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: –ê–ª—å–±–æ–º - {'–î–∞' if album_sent else '–ù–µ—Ç'}, –§–æ—Ç–æ —Å–∞—Ä–∫–∞–∑–º–∞ - {'–î–∞' if sarcasm_photo_sent else '–ù–µ—Ç'}, –û–ø—Ä–æ—Å - {'–î–∞' if poll_sent else '–ù–µ—Ç'})")
        print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è {gen_id}...")
        cleanup_local_files()

    # –£—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ê–õ–¨–ë–û–ú–ê –∏ –§–û–¢–û –°–ê–†–ö–ê–ó–ú–ê
    return success

# ------------------------------------------------------------
# 5) –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–ø–æ–∏—Å–∫ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è) - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ------------------------------------------------------------
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    –ò—â–µ—Ç –≤—Å–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö.
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–±–µ–∑ 4 —Ñ–∞–π–ª–æ–≤).
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    print("\n" + "="*50)
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ B2 -> Telegram (v18: –ê–ª—å–±–æ–º(2) + –°–∞—Ä–∫–∞–∑–º + –ü–∞—É–∑–∞ + –û–ø—Ä–æ—Å)") # <-- –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    print("="*50)

    print("üßπ –û—á–∏—â–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    os.makedirs(PROCESSED_DIR, exist_ok=True)
    os.makedirs(ERROR_DIR, exist_ok=True)
    print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –≥–æ—Ç–æ–≤—ã.")

    published_ids = load_published_ids()

    folders_to_scan = ["444/", "555/", "666/"]
    print(f"üìÇ –ü–∞–ø–∫–∏ –≤ –±–∞–∫–µ—Ç–µ '{S3_BUCKET_NAME}' –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(folders_to_scan)}")

    unpublished_items: List[Tuple[str, str]] = []

    for folder in folders_to_scan:
        print(f"\nüîé –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder}")
        try:
            ls_result = bucket.ls(folder_to_list=folder, recursive=False)
            gen_ids_in_folder = set()
            for file_version, _folder_name in ls_result:
                file_name = file_version.file_name
                relative_path = file_name.replace(folder, '', 1)
                if '/' not in relative_path: # –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ –ø–∞–ø–∫–µ
                    gen_id = None
                    if relative_path.endswith(SARCASM_SUFFIX):
                        gen_id = relative_path[:-len(SARCASM_SUFFIX)]
                    else:
                        gen_id = os.path.splitext(relative_path)[0]

                    if re.fullmatch(r"\d{8}-\d{4}", gen_id):
                        gen_ids_in_folder.add(gen_id)
                    else:
                        if not relative_path.endswith('.bzEmpty'):
                             print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º ID: {file_name}")

            print(f"   ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(gen_ids_in_folder)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Ñ–æ—Ä–º–∞—Ç–∞ –ì–ì–ì–ì–ú–ú–î–î-–ß–ß–ú–ú –≤ {folder}")

            new_ids = gen_ids_in_folder - published_ids
            if new_ids:
                print(f"   ‚ú® –ù–∞–π–¥–µ–Ω–æ {len(new_ids)} –Ω–æ–≤—ã—Ö (–Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö) ID –≤ {folder}.")
                for gen_id in new_ids:
                    unpublished_items.append((gen_id, folder))
            else:
                print(f"   ‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö ID –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {folder}.")

        except B2Error as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ B2 SDK –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder}: {e}")
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder}: {e}")

    if unpublished_items:
        print(f"\n‚è≥ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(unpublished_items)} –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        unpublished_items.sort(key=lambda item: item[0])
        print("   üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (gen_id)...")

        published_this_run = False # –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ª–∏ –º—ã —á—Ç–æ-—Ç–æ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ
        for gen_id_to_publish, folder_to_publish in unpublished_items:
            print(f"\n‚ñ∂Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É: ID={gen_id_to_publish} –∏–∑ –ø–∞–ø–∫–∏ {folder_to_publish}")
            print("-" * 50)

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            success = await publish_generation_id(gen_id_to_publish, folder_to_publish, published_ids)

            print("-" * 50)
            if success:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ {gen_id_to_publish}.")
                published_this_run = True
                break # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            else:
                print(f"‚ÑπÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã {gen_id_to_publish} –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π...")

        if not published_this_run:
             print("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω—ã—Ö –≥—Ä—É–ø–ø (4 —Ñ–∞–π–ª–∞) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ.")

    else:
        print("\nüéâ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö.")

    print("\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    print("="*50 + "\n")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
         print(f"\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
