#!/usr/bin/env python3
import os
import json
import asyncio
import shutil
from telegram import Bot
import b2sdk.v2
import re
from typing import Set, List, Tuple

# ------------------------------------------------------------
# 1) –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ------------------------------------------------------------
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([
    S3_KEY_ID,
    S3_APPLICATION_KEY,
    S3_BUCKET_NAME,
    TELEGRAM_TOKEN,
    TELEGRAM_CHAT_ID
]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ------------------------------------------------------------
# 2) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏, –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –∏ B2 SDK
# ------------------------------------------------------------
BASE_DIR = os.path.dirname(__file__)
DOWNLOAD_DIR = os.path.join(BASE_DIR, "downloaded")
PROCESSED_DIR = os.path.join(DOWNLOAD_DIR, "processed") # –ü–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è B2 API
info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
try:
    b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)
    bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2 –±–∞–∫–µ—Ç—É: {S3_BUCKET_NAME}")
except Exception as e:
    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ B2: {e}")

# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å config_public.json (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö)
# ------------------------------------------------------------
def load_published_ids() -> Set[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ config_public.json –≤ B2.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç set —Å ID.
    """
    local_config = os.path.join(DOWNLOAD_DIR, "config_public.json")
    config_key = "config/config_public.json"
    published_ids = set()
    try:
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å {config_key}...")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(local_config), exist_ok=True)
        bucket.download_file_by_name(config_key).save_to(local_config)
        with open(local_config, "r", encoding="utf-8") as f:
            data = json.load(f)
        published = data.get("generation_id", [])
        if isinstance(published, list):
             published_ids = set(published)
        print(f"‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(published_ids)} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö ID –∏–∑ {config_key}.")
    except b2sdk.exception.FileNotPresent as e:
         print(f"‚ö†Ô∏è –§–∞–π–ª {config_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ B2. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
         # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π set, –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–∑–∂–µ
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å {config_key}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
    return published_ids

def save_published_ids(pub_ids: Set[str]):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö ID –≤ config_public.json –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ B2.
    """
    local_config = os.path.join(DOWNLOAD_DIR, "config_public.json")
    config_key = "config/config_public.json"
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON
        data = {"generation_id": sorted(list(pub_ids))} # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        os.makedirs(os.path.dirname(local_config), exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        with open(local_config, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print(f"üíæ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω {local_config}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ B2
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π {config_key} –≤ B2...")
        bucket.upload_local_file(local_config, config_key)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω {config_key} –≤ B2. –í—Å–µ–≥–æ ID: {len(pub_ids)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å {config_key}: {e}")

# ------------------------------------------------------------
# 3) –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∂–∏–º–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
# ------------------------------------------------------------
def remove_system_phrases(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫."""
    system_phrases = [
        "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:",
        "üî•–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "üìö–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", "üîç–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
    ]
    clean = text
    for phrase in system_phrases:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º re.sub –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥
        clean = re.sub(r'\s*' + re.escape(phrase) + r'\s*', '', clean, flags=re.IGNORECASE)
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    clean = re.sub(r"\n\s*\n+", "\n\n", clean)
    return clean.strip()

# ------------------------------------------------------------
# 4) –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ JSON (—Å –≤–∏–¥–µ–æ –∏ –¥–æ 3 —Å–æ–æ–±—â–µ–Ω–∏–π)
# ------------------------------------------------------------
async def publish_generation_id(gen_id: str, folder: str, published_ids: Set[str]) -> bool:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ generation_id (JSON + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∏–¥–µ–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    print(f"‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º gen_id: {gen_id} –∏–∑ –ø–∞–ø–∫–∏ {folder}")
    json_file_key = f"{folder}{gen_id}.json"
    video_file_key = f"{folder}{gen_id}.mp4"

    # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
    local_json_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}.json")
    local_video_path = os.path.join(DOWNLOAD_DIR, f"{gen_id}.mp4")
    video_downloaded = False

    try:
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º JSON: {json_file_key} -> {local_json_path}")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(local_json_path), exist_ok=True)
        bucket.download_file_by_name(json_file_key).save_to(local_json_path)
    except b2sdk.exception.FileNotPresent:
        print(f"‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file_key}")
        return False # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ JSON
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ JSON {json_file_key}: {e}")
        return False

    try:
        print(f"üì• –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {video_file_key} -> {local_video_path}")
         # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(local_video_path), exist_ok=True)
        bucket.download_file_by_name(video_file_key).save_to(local_video_path)
        video_downloaded = True
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {local_video_path}")
    except b2sdk.exception.FileNotPresent:
        print(f"‚ÑπÔ∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {gen_id}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ.")
        video_file_key = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ {video_file_key}: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–∏–¥–µ–æ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
    messages_sent = 0
    os.makedirs(PROCESSED_DIR, exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–∫–∞—á–∞–Ω–æ
    if video_downloaded:
        try:
            print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ {gen_id}.mp4 –≤ Telegram...")
            with open(local_video_path, "rb") as video_file:
                await bot.send_video(
                    chat_id=TELEGRAM_CHAT_ID,
                    video=video_file,
                    supports_streaming=True,
                    # caption=f"–í–∏–¥–µ–æ –¥–ª—è {gen_id}" # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ
                )
            messages_sent += 1
            print(f"‚úÖ –í–∏–¥–µ–æ {gen_id}.mp4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–∏–¥–µ–æ –≤ processed
            shutil.move(local_video_path, os.path.join(PROCESSED_DIR, f"{gen_id}.mp4"))
            print(f"üìÅ –í–∏–¥–µ–æ {gen_id}.mp4 –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ {PROCESSED_DIR}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {gen_id}.mp4: {e}")
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ downloaded –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∂–µ

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON
    try:
        with open(local_json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        # ---------- –û–ë–†–ê–ë–û–¢–ö–ê TOPIC -----------
        raw_topic = data.get("topic", "")
        topic = ""
        if isinstance(raw_topic, dict):
            topic = raw_topic.get("full_topic", "")
            if isinstance(topic, str):
                topic = topic.strip("'\" ") # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
            else:
                 topic = ""
        elif isinstance(raw_topic, str):
            topic = raw_topic.strip("'\" ")
        # –ï—Å–ª–∏ topic –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –¥–µ–ª–∞–µ–º –µ–≥–æ None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        topic = topic if topic else ""

        # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = data.get("content", "").strip()
        content = remove_system_phrases(content)

        # (1) –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if content:
            text_to_send = ""
            if topic:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
                text_to_send = f"üèõ <b>{topic}</b>\n\n{content}"
            else:
                text_to_send = content

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(text_to_send) > 4096:
                 print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–ª—è {gen_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(text_to_send)} —Å–∏–º–≤–æ–ª–æ–≤). –û–±—Ä–µ–∑–∞–µ–º –¥–æ 4090...")
                 text_to_send = text_to_send[:4090] + "..." # –û–±—Ä–µ–∑–∞–µ–º —Å –∑–∞–ø–∞—Å–æ–º

            print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {gen_id}...")
            await bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=text_to_send,
                parse_mode="HTML" # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (<b>)
            )
            messages_sent += 1
            print(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # (2) –°–∞—Ä–∫–∞–∑–º
        sarcasm_comment = data.get("sarcasm", {}).get("comment", "").strip()
        if sarcasm_comment:
             # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–∏–≤–æ–º
            sarcasm_text = f"üìú <i>{sarcasm_comment}</i>"
            if len(sarcasm_text) > 4096: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
                 print(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–∞—Ä–∫–∞–∑–º–∞ –¥–ª—è {gen_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –û–±—Ä–µ–∑–∞–µ–º...")
                 sarcasm_text = sarcasm_text[:4090] + "..."

            print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞—Ä–∫–∞–∑–º –¥–ª—è {gen_id}...")
            await bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=sarcasm_text,
                parse_mode="HTML" # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (<i>)
            )
            messages_sent += 1
            print(f"‚úÖ –°–∞—Ä–∫–∞–∑–º –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        # (3) –û–ø—Ä–æ—Å
        poll_data = data.get("sarcasm", {}).get("poll", {})
        question = poll_data.get("question", "").strip()
        options = [str(opt).strip() for opt in poll_data.get("options", []) if str(opt).strip()] # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –æ–ø—Ü–∏–∏

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram –Ω–∞ –æ–ø—Ä–æ—Å—ã:
        # –í–æ–ø—Ä–æ—Å: 1-300 —Å–∏–º–≤–æ–ª–æ–≤
        # –û–ø—Ü–∏–∏: 1-100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–∞—è, –æ—Ç 2 –¥–æ 10 –æ–ø—Ü–∏–π
        question = question[:300] # –û–±—Ä–µ–∑–∞–µ–º –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ
        options = [opt[:100] for opt in options][:10] # –û–±—Ä–µ–∑–∞–µ–º –æ–ø—Ü–∏–∏ –∏ –±–µ—Ä–µ–º –Ω–µ –±–æ–ª—å—à–µ 10

        if question and len(options) >= 2:
            poll_question = f"üé≠ {question}" # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –≤–æ–ø—Ä–æ—Å—É
            print(f"‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –¥–ª—è {gen_id}...")
            await bot.send_poll(
                chat_id=TELEGRAM_CHAT_ID,
                question=poll_question,
                options=options,
                is_anonymous=True # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å
            )
            messages_sent += 1
            print(f"‚úÖ –û–ø—Ä–æ—Å –¥–ª—è {gen_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        elif question and len(options) < 2:
             print(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å –¥–ª—è {gen_id} –∏–º–µ–µ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–µ–Ω—å—à–µ 2 –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø—Ü–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON-—Ñ–∞–π–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if messages_sent > 0:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ processed —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(PROCESSED_DIR, exist_ok=True)
            shutil.move(local_json_path, os.path.join(PROCESSED_DIR, os.path.basename(local_json_path)))
            print(f"üìÅ JSON —Ñ–∞–π–ª {gen_id}.json –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {PROCESSED_DIR}")
            # –î–æ–±–∞–≤–ª—è–µ–º gen_id –≤ published_ids –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–¢–ü–†–ê–í–ö–ò
            published_ids.add(gen_id)
            save_published_ids(published_ids) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ID
            print(f"üìù ID {gen_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö.")
            return True
        else:
            print(f"‚ö†Ô∏è –î–ª—è gen_id={gen_id} –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—É—Å—Ç–æ–π JSON?). –§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω, ID –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JSON, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω
            if os.path.exists(local_json_path):
                os.remove(local_json_path)
                print(f"üóë –£–¥–∞–ª–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª: {local_json_path}")
            return False

    except json.JSONDecodeError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {local_json_path}: {e}")
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –æ—à–∏–±–æ–∫
        error_dir = os.path.join(DOWNLOAD_DIR, "errors")
        os.makedirs(error_dir, exist_ok=True)
        if os.path.exists(local_json_path):
             shutil.move(local_json_path, os.path.join(error_dir, os.path.basename(local_json_path)))
             print(f"üìÅ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π JSON {gen_id}.json –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {error_dir}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {gen_id}: {e}")
        return False


# ------------------------------------------------------------
# 5) –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–ø–æ–∏—Å–∫ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è)
# ------------------------------------------------------------
async def main():
    print("\n" + "="*40)
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ B2 -> Telegram")
    print("="*40)

    print("üóë –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    print(f"‚úÖ –ü–∞–ø–∫–∞ {DOWNLOAD_DIR} –≥–æ—Ç–æ–≤–∞.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    published_ids = load_published_ids()

    # –ü–∞–ø–∫–∏ –≤ B2 –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    folders_to_scan = ["444/", "555/", "666/"]
    print(f"üìÇ –ü–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(folders_to_scan)}")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ gen_id –∏–∑ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
    unpublished_items: List[Tuple[str, str]] = [] # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (gen_id, folder)

    for folder in folders_to_scan:
        print(f"\nüîé –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç show_versions
            ls_result = bucket.ls(folder_to_list=folder, recursive=True)

            gen_ids_in_folder = set()
            for file_version, _folder_name in ls_result:
                file_name = file_version.file_name
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –ø–∞–ø–∫–µ folder (–∏–ª–∏ –µ–µ –ø–æ–¥–ø–∞–ø–∫–∞—Ö, –µ—Å–ª–∏ recursive=True)
                # –∏ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json
                if file_name.startswith(folder) and file_name.endswith(".json"):
                     # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                     base_name = os.path.basename(file_name)
                     gen_id = os.path.splitext(base_name)[0]
                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç YYYYMMDD-HHMM (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                     if re.fullmatch(r"\d{8}-\d{4}", gen_id):
                          gen_ids_in_folder.add(gen_id)
                     else:
                          print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º ID: {file_name}")

            print(f"   ‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(gen_ids_in_folder)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —Ñ–æ—Ä–º–∞—Ç–∞ YYYYMMDD-HHMM –≤ {folder}")

            # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ID –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏
            new_ids = gen_ids_in_folder - published_ids
            if new_ids:
                print(f"   ‚ú® –ù–∞–π–¥–µ–Ω–æ {len(new_ids)} –Ω–æ–≤—ã—Ö (–Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö) ID –≤ {folder}.")
                for gen_id in new_ids:
                    unpublished_items.append((gen_id, folder))
            else:
                print(f"   ‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö ID –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {folder}.")

        except Exception as e:
            # –õ–æ–≤–∏–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {folder}: {e}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if unpublished_items:
        print(f"\n‚è≥ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(unpublished_items)} –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ gen_id (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏)
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ 'YYYYMMDD-HHMM' —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        unpublished_items.sort(key=lambda item: item[0])
        print("   üî¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (gen_id)...")

        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        gen_id_to_publish, folder_to_publish = unpublished_items[0]

        print(f"\nüéØ –í—ã–±—Ä–∞–Ω–∞ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ID={gen_id_to_publish} –∏–∑ –ø–∞–ø–∫–∏ {folder_to_publish}")
        print("-" * 40)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        success = await publish_generation_id(gen_id_to_publish, folder_to_publish, published_ids)

        print("-" * 40)
        if success:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ {gen_id_to_publish}.")
            # –°–ø–∏—Å–æ–∫ published_ids —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤–Ω—É—Ç—Ä–∏ publish_generation_id
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É {gen_id_to_publish}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤—ã—à–µ.")
            # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ ID –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ published_ids, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑

    else:
        print("\nüéâ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö.")

    print("\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
    print("="*40 + "\n")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram)
    asyncio.run(main())
