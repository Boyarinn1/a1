import os
import json
import requests
import re

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # scripts/
BASE_DIR = os.path.dirname(BASE_DIR)  # a1/
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")


def find_json_mp4_pairs():
    """–ò—â–µ—Ç –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (.json –∏ .mp4)"""
    files = os.listdir(DOWNLOAD_DIR)
    json_files = {f[:-5] for f in files if f.endswith(".json")}
    mp4_files = {f[:-4] for f in files if f.endswith(".mp4")}

    pairs = json_files & mp4_files  # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    return list(pairs)


def load_json_data(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    json_path = os.path.join(DOWNLOAD_DIR, f"{filename}.json")
    try:
        with open(json_path, "r", encoding="utf-8") as file:
            return json.load(file)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON {json_path}: {e}")
        return None


def format_message(post_data):
    topic = post_data.get("topic", {}).get("topic", "üöÄ –ë–µ–∑ —Ç–µ–º—ã")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    content = post_data.get("text_initial", {}).get("content", "").strip()  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    sarcasm = post_data.get("sarcasm", {}).get("comment", "").strip()  # –°–∞—Ä–∫–∞–∑–º

    if not content:
        content = "‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."

    return f"""üèõ **{topic}**

{content}

„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞

üé≠ *{sarcasm.capitalize()}*"""


def extract_poll(post_data):
    raw_poll = post_data.get("sarcasm", {}).get("poll", "").strip()
    if not raw_poll:
        print("‚ùå –û–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ JSON!")
        return None
    try:
        raw_poll = raw_poll.replace("'", '"')
        poll_json = json.loads(f"{{{raw_poll}}}")
        question = poll_json.get("question", "")
        options = poll_json.get("options", [])
        if not question or len(options) < 2 or len(options) > 10:
            print(f"‚ùå –û—à–∏–±–∫–∞: –û–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! (question={question}, options={options})")
            return None
        poll_data = {"question": question, "options": options}
        print(f"‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í–æ–ø—Ä–æ—Å: {question}")
        return poll_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ poll: {e}\n–ò—Å—Ö–æ–¥–Ω—ã–π poll: {raw_poll}")
        return None


def send_poll(bot_token, chat_id, poll_question, poll_options):
    payload = {
        "chat_id": chat_id,
        "question": poll_question,
        "options": poll_options,
        "is_anonymous": True,
        "type": "regular"
    }
    response = requests.post(f"https://api.telegram.org/bot{bot_token}/sendPoll", json=payload)
    print(f"üì© –û—Ç–≤–µ—Ç Telegram API (–æ–ø—Ä–æ—Å): {response.status_code} {response.json()}")
    return response


def send_message(bot_token, chat_id, message):
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
    response = requests.post(f"https://api.telegram.org/bot{bot_token}/sendMessage", json=payload)
    print(f"üì© –û—Ç–≤–µ—Ç Telegram API: {response.status_code} {response.json()}")
    return response


def main():
    bot_token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")

    pairs = find_json_mp4_pairs()
    if not pairs:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ .json + .mp4. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        return

    for filename in pairs:
        post_data = load_json_data(filename)
        if not post_data:
            continue
        message = format_message(post_data)
        send_message(bot_token, chat_id, message)
        poll_data = extract_poll(post_data)
        if poll_data:
            send_poll(bot_token, chat_id, poll_data["question"], poll_data["options"])


if __name__ == "__main__":
    main()
