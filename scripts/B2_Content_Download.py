import os
import json
import b2sdk.v2
import asyncio
import shutil
from telegram import Bot

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not all([S3_KEY_ID, S3_APPLICATION_KEY, S3_BUCKET_NAME, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN)

info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)

bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)

def get_published_generation_ids():
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç config_public.json –∏–∑ B2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ (set) —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö generation_id.
    –ù–∞–ø—Ä–∏–º–µ—Ä: {"20250201-1131", "20250201-1243"}
    """
    try:
        local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")
        bucket.download_file_by_name("config/config_public.json").save_to(local_config_path)

        with open(local_config_path, "r", encoding="utf-8") as f:
            config_data = json.load(f)

        # –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç 'generation_id', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
        return set(config_data.get("generation_id", []))
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config_public.json: {e}")
        return set()

def save_published_generation_ids(published_ids: set):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç config_public.json, –¥–æ–ø–æ–ª–Ω—è—è –ø–æ–ª–µ generation_id –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ published_ids.
    """
    try:
        local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å)
        if os.path.exists(local_config_path):
            with open(local_config_path, "r", encoding="utf-8") as f:
                config_data = json.load(f)
        else:
            config_data = {}

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–µ generation_id
        config_data["generation_id"] = list(published_ids)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        with open(local_config_path, "w", encoding="utf-8") as f:
            json.dump(config_data, f, ensure_ascii=False, indent=4)

        # –ò –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ B2
        bucket.upload_local_file(local_config_path, "config/config_public.json")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω config_public.json: {config_data['generation_id']}")
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ config_public.json: {e}")

async def process_one_generation_id(gen_id: str, folder: str, published_ids: set) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç (—Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ TG) –≤—Å–µ —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ `folder`,
    —É –∫–æ—Ç–æ—Ä—ã—Ö basename (–±–µ–∑ .json) == gen_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è).
    """

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .json –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
    all_files = [
        file_version.file_name
        for file_version, _ in bucket.ls(folder, recursive=True)
        if file_version.file_name.endswith(".json")
    ]

    # 2. –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ basename (–±–µ–∑ .json) —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å gen_id
    target_files = []
    for f_name in all_files:
        basename = os.path.basename(f_name)       # –ü—Ä–∏–º–µ—Ä: "20250201-1131.json"
        base_noext = basename.rsplit(".", 1)[0]   # "20250201-1131"
        if base_noext == gen_id:
            target_files.append(f_name)

    if not target_files:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è gen_id={gen_id} –≤ –ø–∞–ø–∫–µ {folder}")
        return False

    messages_sent = 0

    # 3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    for f_name in target_files:
        local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(f_name))
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {f_name} –≤ {local_path}...")
            bucket.download_file_by_name(f_name).save_to(local_path)

            # --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É: –≤—ã–≤–æ–¥ ¬´—Å—ã—Ä—ã—Ö¬ª –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
            with open(local_path, "r", encoding="utf-8") as f:
                raw_content = f.read()
                print(f"üîç DEBUG (raw JSON) –¥–ª—è —Ñ–∞–π–ª–∞ {f_name}:\n{raw_content}")
                data = json.loads(raw_content)

            # –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∏–∑ JSON
            topic_clean = data.get("topic", {}).get("topic", "").strip("'\"")
            text_content = data.get("text_initial", {}).get("content", "").strip()

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–Ω—Ç –¥–ª—è parsed-–¥–∞–Ω–Ω—ã—Ö
            print(f"üîé DEBUG (parsed) –¥–ª—è —Ñ–∞–π–ª–∞ {f_name}:")
            print(f"    topic_clean = '{topic_clean}'")
            print(f"    text_content = '{text_content}'")

            # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ---
            if text_content:
                formatted_text = f"üèõ <b>{topic_clean}</b>\n\n{text_content}"
                print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {formatted_text}")
                await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=formatted_text, parse_mode="HTML")
                messages_sent += 1

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            sarcasm_comment = data.get("sarcasm", {}).get("comment", "").strip()
            if sarcasm_comment:
                sarcasm_text = f"üìú <i>{sarcasm_comment}</i>"
                print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {sarcasm_text}")
                await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=sarcasm_text, parse_mode="HTML")
                messages_sent += 1

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ (poll), –µ—Å–ª–∏ –µ—Å—Ç—å
            if "sarcasm" in data and "poll" in data["sarcasm"]:
                poll_data = data["sarcasm"]["poll"]
                question = poll_data.get("question", "").strip()
                options = poll_data.get("options", [])

                if question and options and len(options) >= 2:
                    print(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å: {question}")
                    await bot.send_poll(
                        chat_id=TELEGRAM_CHAT_ID,
                        question=f"üé≠ {question}",
                        options=options,
                        is_anonymous=True
                    )
                    messages_sent += 1
                else:
                    print("‚ö†Ô∏è –û–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!")

            # --- –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É processed ---
            processed_dir = os.path.join(BASE_DIR, "data", "processed")
            os.makedirs(processed_dir, exist_ok=True)
            shutil.move(local_path, os.path.join(processed_dir, os.path.basename(local_path)))
            print(f"üóë –§–∞–π–ª {f_name} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤ processed.")

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {f_name}: {e}")

    # 4. –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if messages_sent > 0:
        # –î–æ–±–∞–≤–ª—è–µ–º gen_id –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
        published_ids.add(gen_id)
        save_published_generation_ids(published_ids)
        return True
    else:
        print(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {gen_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø—É—Å—Ç—ã–µ?).")
        return False

async def process_files():
    print("üóë –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    print("\nüì• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ config_public.json...")
    published_ids = get_published_generation_ids()

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–∞–ø–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (444 -> 555 -> 666)
    folders = ["444/", "555/", "666/"]

    for folder in folders:
        print(f"\nüìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder}")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ .json-—Ñ–∞–π–ª–æ–≤
        all_files = [
            file_version.file_name
            for file_version, _ in bucket.ls(folder, recursive=True)
            if file_version.file_name.endswith(".json")
        ]

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ generation_id, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
        folder_generation_ids = set()
        for f_name in all_files:
            basename = os.path.basename(f_name)         # "20250201-1131.json"
            base_noext = basename.rsplit(".", 1)[0]     # "20250201-1131"
            folder_generation_ids.add(base_noext)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        for gen_id in sorted(folder_generation_ids):
            # –ï—Å–ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if gen_id in published_ids:
                continue

            # –ü—É–±–ª–∏–∫—É–µ–º (—ç—Ç–æ –±—É–¥–µ—Ç "–æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞")
            print(f"üîé –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {gen_id}. –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å...")
            success = await process_one_generation_id(gen_id, folder, published_ids)
            if success:
                print("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç.")
                return  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
            else:
                # –ï—Å–ª–∏ —É—Å–ø–µ—Ö–∞ –Ω–µ –±—ã–ª–æ (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ?), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É gen_id
                print(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {gen_id} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π.")

        print(f"‚ÑπÔ∏è –í –ø–∞–ø–∫–µ {folder} –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤—ã—Ö (–Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö) –≥—Ä—É–ø–ø.")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ

    print("üöÄ –í–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

if __name__ == "__main__":
    asyncio.run(process_files())
