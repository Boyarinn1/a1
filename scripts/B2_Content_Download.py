#!/usr/bin/env python3
import os
import json
import asyncio
import shutil
from telegram import Bot
import b2sdk.v2

# ------------------------------------------------------------
# 1) –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ B2 –∏ Telegram
# ------------------------------------------------------------
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not all([
    S3_KEY_ID,
    S3_APPLICATION_KEY,
    S3_BUCKET_NAME,
    TELEGRAM_TOKEN,
    TELEGRAM_CHAT_ID
]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ------------------------------------------------------------
# 2) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏, –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –∏ B2 SDK
# ------------------------------------------------------------
BASE_DIR = os.path.dirname(__file__)  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–µ–Ω—è–π—Ç–µ –ø–æ–¥ —Å–µ–±—è
DOWNLOAD_DIR = os.path.join(BASE_DIR, "downloaded")  # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON

bot = Bot(token=TELEGRAM_TOKEN)

info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)
bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)

# ------------------------------------------------------------
# 3) –†–∞–±–æ—Ç–∞ —Å config_public.json (—Ö—Ä–∞–Ω–∏–º published generation_id)
# ------------------------------------------------------------
def load_published_ids() -> set:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç config_public.json (–∏–∑ b2) -> —Å–∫–∞—á–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ,
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö generation_id.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—è generation_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π set.
    """
    local_config = os.path.join(DOWNLOAD_DIR, "config_public.json")
    try:
        bucket.download_file_by_name("config/config_public.json").save_to(local_config)
        with open(local_config, "r", encoding="utf-8") as f:
            data = json.load(f)
        published = data.get("generation_id", [])
        if not isinstance(published, list):
            return set()
        return set(published)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config_public.json: {e}")
        return set()

def save_published_ids(pub_ids: set):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç pub_ids –≤ config_public.json, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –ø–æ–ª–µ generation_id.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç config_public.json –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ B2.
    """
    local_config = os.path.join(DOWNLOAD_DIR, "config_public.json")
    try:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if os.path.exists(local_config):
            with open(local_config, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = {}
        data["generation_id"] = list(pub_ids)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        with open(local_config, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

        # –ó–∞–ª–∏–≤–∞–µ–º –≤ B2
        bucket.upload_local_file(local_config, "config/config_public.json")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω config_public.json: {data['generation_id']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config_public.json: {e}")

# ------------------------------------------------------------
# 4) –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–ª–æ–≤ (–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ: –∏ —Ç. –ø.)
# ------------------------------------------------------------
def remove_system_phrases(text: str) -> str:
    system_phrases = [
        "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:",
        "üî•–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "üìö–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", "üîç–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
    ]
    clean = text
    for phrase in system_phrases:
        clean = clean.replace(phrase, "")
    return clean.strip()

# ------------------------------------------------------------
# 5) –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ JSON (gen_id) ‚Äî —Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–º–∞+—Ç–µ–∫—Å—Ç, —Å–∞—Ä–∫–∞–∑–º, –æ–ø—Ä–æ—Å)
# ------------------------------------------------------------
async def publish_generation_id(gen_id: str, folder: str, published_ids: set) -> bool:
    """
    –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª {gen_id}.json –≤ –ø–∞–ø–∫–µ folder, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –¥–æ 3 —Å–æ–æ–±—â–µ–Ω–∏–π:
    1) –¢–µ–º–∞ (bold) + content (–æ—á–∏—â–µ–Ω–Ω–æ–µ),
    2) –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,
    3) –û–ø—Ä–æ—Å (poll).
    –ü–æ—Å–ª–µ ‚Äî –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ downloaded/processed, –¥–æ–±–∞–≤–ª—è–µ–º gen_id –≤ published_ids.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –±—ã–ª–æ >=1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """

    # –°–ø–∏—Å–æ–∫ .json –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
    matches = []
    for file_version, _ in bucket.ls(folder, recursive=True):
        if file_version.file_name.endswith(".json"):
            basename = os.path.basename(file_version.file_name)  # ex: "20250204-1813.json"
            base_noext = basename.rsplit(".", 1)[0]
            if base_noext == gen_id:
                matches.append(file_version.file_name)

    if not matches:
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {gen_id}.json –≤ –ø–∞–ø–∫–µ {folder}")
        return False

    messages_sent = 0
    for file_key in matches:
        local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_key))
        # –°–∫–∞—á–∏–≤–∞–µ–º
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {file_key} -> {local_path}")
        bucket.download_file_by_name(file_key).save_to(local_path)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º, —á–∏—Ç–∞–µ–º JSON
        with open(local_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
        topic = data.get("topic", "").strip("'\"")
        content = data.get("content", "").strip()
        content = remove_system_phrases(content)

        # (1) –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–µ–º–∞ + –∫–æ–Ω—Ç–µ–Ω—Ç)
        if content:
            if topic:
                text_send = f"üèõ <b>{topic}</b>\n\n{content}"
            else:
                text_send = content
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text_send, parse_mode="HTML")
            messages_sent += 1

        # (2) –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        sarcasm_comment = data.get("sarcasm", {}).get("comment", "").strip()
        if sarcasm_comment:
            sarcasm_text = f"üìú <i>{sarcasm_comment}</i>"
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=sarcasm_text, parse_mode="HTML")
            messages_sent += 1

        # (3) –û–ø—Ä–æ—Å
        poll = data.get("sarcasm", {}).get("poll", {})
        question = poll.get("question", "").strip()
        options = poll.get("options", [])
        if question and len(options) >= 2:
            poll_question = f"üé≠ {question}"
            await bot.send_poll(
                chat_id=TELEGRAM_CHAT_ID,
                question=poll_question,
                options=options,
                is_anonymous=True
            )
            messages_sent += 1

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ processed
        processed_dir = os.path.join(DOWNLOAD_DIR, "processed")
        os.makedirs(processed_dir, exist_ok=True)
        shutil.move(local_path, os.path.join(processed_dir, os.path.basename(local_path)))
        print(f"üóë –§–∞–π–ª {file_key} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ {processed_dir}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º gen_id –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
    published_ids.add(gen_id)
    save_published_ids(published_ids)

    return (messages_sent > 0)

# ------------------------------------------------------------
# 6) –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ 444/, 555/, 666/. –ü—É–±–ª–∏–∫—É–µ–º 1 –≥—Ä—É–ø–ø—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
# ------------------------------------------------------------
async def main():
    print("üóë –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
    published_ids = load_published_ids()

    folders = ["444/", "555/", "666/"]
    for folder in folders:
        print(f"üîé –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {folder}")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ gen_id –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
        all_jsons = []
        for file_version, _ in bucket.ls(folder, recursive=True):
            if file_version.file_name.endswith(".json"):
                all_jsons.append(file_version.file_name)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º gen_id
        gen_ids_in_folder = set()
        for file_key in all_jsons:
            basename = os.path.basename(file_key)
            base_noext = basename.rsplit(".", 1)[0]
            gen_ids_in_folder.add(base_noext)

        print(f"DEBUG: –ù–∞–π–¥–µ–Ω—ã JSON-—Ñ–∞–π–ª—ã: {gen_ids_in_folder}")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ gen_id –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        for gen_id in sorted(gen_ids_in_folder):
            if gen_id in published_ids:
                # –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                continue

            print(f"üîé –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {gen_id} –≤ {folder}. –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å...")

            success = await publish_generation_id(gen_id, folder, published_ids)
            if success:
                print("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç.")
                return
            else:
                print(f"‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è gen_id={gen_id} –Ω–µ –¥–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        print(f"‚ÑπÔ∏è –í –ø–∞–ø–∫–µ {folder} –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

    print("üöÄ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö. –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    asyncio.run(main())
