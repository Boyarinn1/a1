import os
import json
import b2sdk.v2
import asyncio
import shutil
from telegram import Bot

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not all([S3_KEY_ID, S3_APPLICATION_KEY, S3_BUCKET_NAME, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN)

info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)

bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)


def get_publish_status():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç config_public.json –∏–∑ B2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫."""
    try:
        local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")
        bucket.download_file_by_name("config/config_public.json").save_to(local_config_path)

        with open(local_config_path, "r", encoding="utf-8") as f:
            config_data = json.load(f)

        return set(config_data.get("publish", "").split(", "))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config_public.json: {e}")
        return set()


def update_publish_status(new_status):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É –≤ 'publish' –≤ config_public.json, –Ω–µ —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

        # üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π config_public.json
        if os.path.exists(local_config_path):
            with open(local_config_path, "r", encoding="utf-8") as f:
                config_data = json.load(f)
        else:
            config_data = {}

        # üè∑ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –≤ publish
        existing_status = set(config_data.get("publish", "").split(", ")) if "publish" in config_data else set()
        existing_status.add(new_status)
        config_data["publish"] = ", ".join(existing_status)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫

        # üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ B2
        with open(local_config_path, "w", encoding="utf-8") as f:
            json.dump(config_data, f, ensure_ascii=False, indent=4)

        bucket.upload_local_file(local_config_path, "config/config_public.json")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω config_public.json: {config_data['publish']}")
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ config_public.json: {e}")


async def process_files():
    print("üóë –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    print("\nüì• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ config_public.json...")
    published_folders = get_publish_status()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–π –ø–∞–ø–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    if "444/" not in published_folders:
        publish_folder = "444/"
    elif "555/" not in published_folders:
        publish_folder = "555/"
    elif "666/" not in published_folders:
        publish_folder = "666/"
    else:
        print("üöÄ –í—Å–µ –ø–∞–ø–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        return

    print(f"üì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ B2 (–ø–∞–ø–∫–∞ {publish_folder})...")
    files_to_download = [file_version.file_name for file_version, _ in bucket.ls(publish_folder, recursive=True)]

    if not files_to_download:
        print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ {publish_folder}")
        return

    for file_name in files_to_download:
        local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_name))

        if not file_name.endswith(".json"):
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_name} (–Ω–µ JSON)")
            continue

        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_name} –≤ {local_path}...")
            bucket.download_file_by_name(file_name).save_to(local_path)

            with open(local_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            topic_clean = data.get("topic", {}).get("topic", "").strip("'\"")
            text_content = data.get("text_initial", {}).get("content", "").strip()

            # üõë –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            clean_text = text_content.replace(f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É: "{topic_clean}"', '').strip()
            clean_text = clean_text.replace("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:", "").strip()

            # üõë –£–±–∏—Ä–∞–µ–º —Å–∞—Ä–∫–∞–∑–º –∏ –æ–ø—Ä–æ—Å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if "üî∂ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:" in clean_text:
                clean_text = clean_text.split("üî∂ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")[0].strip()

            if "üî∏ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:" in clean_text:
                clean_text = clean_text.split("üî∏ –°–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:")[0].strip()

            formatted_text = f"üèõ <b>{topic_clean.strip()}</b>\n\n{clean_text}"
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=formatted_text, parse_mode="HTML")
            await asyncio.sleep(1)

            sarcasm_comment = data.get("sarcasm", {}).get("comment", "").strip()
            if sarcasm_comment:
                sarcasm_text = f"üìú <i>{sarcasm_comment}</i>"
                await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=sarcasm_text, parse_mode="HTML")
                await asyncio.sleep(1)

            if "sarcasm" in data and "poll" in data["sarcasm"]:
                poll_data = data["sarcasm"]["poll"]
                question = poll_data.get("question", "").strip()
                options = poll_data.get("options", [])

                if question and options and len(options) >= 2:
                    await bot.send_poll(chat_id=TELEGRAM_CHAT_ID, question=f"üé≠ {question}", options=options,
                                        is_anonymous=True)
                    await asyncio.sleep(1)

            update_publish_status(publish_folder)

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")

    print("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == "__main__":
    asyncio.run(process_files())
