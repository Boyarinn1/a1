import os
import json
import b2sdk.v2
import asyncio
import shutil
from telegram import Bot
from telegram.error import TelegramError
from telegram.helpers import escape_markdown

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")
CONFIG_PATH = os.path.join(BASE_DIR, "config", "config_public.json")

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
S3_ENDPOINT = os.getenv("S3_ENDPOINT", "production")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([S3_KEY_ID, S3_APPLICATION_KEY, S3_BUCKET_NAME, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# üîπ Telegram Bot
bot = Bot(token=TELEGRAM_TOKEN)

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2
info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
b2_api.authorize_account(S3_ENDPOINT, S3_KEY_ID, S3_APPLICATION_KEY)

# üîπ –ü–æ–ª—É—á–∞–µ–º bucket
bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)

async def process_files():
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-—Ñ–∞–π–ª–æ–≤ –≤ Telegram"""

    # üîç –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
    print("üóë –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º...")
    shutil.rmtree(DOWNLOAD_DIR, ignore_errors=True)
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    # üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ B2 (–ø–∞–ø–∫–∞ 666/)
    print("\nüì• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ B2 (–ø–∞–ø–∫–∞ 666/)...")
    files_to_download = [file_version.file_name for file_version, _ in bucket.ls("666/", recursive=True)]

    print(f"üìå –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ B2: {len(files_to_download)}")
    if not files_to_download:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return

    for file_name in files_to_download:
        local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_name))

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ JSON-—Ñ–∞–π–ª—ã
        if not file_name.endswith(".json"):
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_name} (–Ω–µ JSON)")
            continue

        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_name} –≤ {local_path}...")
            bucket.download_file_by_name(file_name).save_to(local_path)

            # –ß–∏—Ç–∞–µ–º JSON
            with open(local_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
            topic_clean = data.get("topic", {}).get("topic", "").strip('"')
            text_content = data.get("text_initial", {}).get("content", "")
            text_content = text_content.replace("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É:", "").strip()
            formatted_text = escape_markdown(f"üèõ {topic_clean}\n\n{text_content}", version=2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=formatted_text, parse_mode="MarkdownV2")

            # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
            if "sarcasm" in data and "poll" in data["sarcasm"]:
                question = data['sarcasm']['poll']['question']
                options_clean = [opt.strip('"') for opt in data['sarcasm']['poll']['options']]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–ø—Ä–æ—Å–æ–≤
                try:
                    await bot.send_poll(chat_id=TELEGRAM_CHAT_ID, question=question, options=options_clean, is_anonymous=False)
                except TelegramError as e:
                    print(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞: {e}")

            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {file_name}")

            # üîπ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤
            processed_dir = os.path.join(BASE_DIR, "data", "processed")
            os.makedirs(processed_dir, exist_ok=True)
            shutil.move(local_path, os.path.join(processed_dir, os.path.basename(local_path)))

            print(f"üóë –§–∞–π–ª {file_name} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤ processed.")

        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")

    print("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(process_files())
