import os
import json
import b2sdk.v2
import subprocess

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # a1/
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")  # a1/data/downloaded
CONFIG_PATH = os.path.join(BASE_DIR, "config", "config_public.json")  # a1/config/config_public.json

# üîπ –û—Ç–ª–∞–¥–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
print(f"üìÇ DOWNLOAD_DIR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {DOWNLOAD_DIR}")
print(f"üìÇ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(DOWNLOAD_DIR)}")

# üîπ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
print(f"üìÇ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {DOWNLOAD_DIR}: {oct(os.stat(DOWNLOAD_DIR).st_mode)}")

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
GH_TOKEN = os.getenv("GH_TOKEN")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([S3_KEY_ID, S3_APPLICATION_KEY, S3_BUCKET_NAME]):
    raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ S3_KEY_ID, S3_APPLICATION_KEY –∏–ª–∏ S3_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2
print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2...")
info = b2sdk.v2.InMemoryAccountInfo()
b2_api = b2sdk.v2.B2Api(info)
b2_api.authorize_account("production", S3_KEY_ID, S3_APPLICATION_KEY)

# üîπ –ü–æ–ª—É—á–∞–µ–º bucket
bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)

# üîπ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ 444/
print("üì• –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ B2 (–ø–∞–ø–∫–∞ 444/)...")
files_to_download = []
for file_version, _ in bucket.ls("444/", recursive=True):
    if file_version.file_name.endswith((".json", ".mp4", ".png")):  # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º
        files_to_download.append(file_version.file_name)

if not files_to_download:
    print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –≤ config_public.json
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump({"status": "waiting", "files": []}, f, indent=4)
    exit(0)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ DOWNLOAD_DIR
downloaded_files = []
for file_name in files_to_download:
    local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_name))
    print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_name} –≤ {local_path}...")
    bucket.download_file_by_name(file_name, local_path)
    downloaded_files.append(os.path.basename(file_name))

print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", downloaded_files)

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∞–ª–∏—Å—å
for file_name in downloaded_files:
    local_path = os.path.join(DOWNLOAD_DIR, file_name)
    if os.path.exists(local_path):
        print(f"‚úÖ –§–∞–π–ª {file_name} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ –≤ {local_path}")
    else:
        print(f"‚ùå –§–∞–π–ª {file_name} –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ {local_path}")

# üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ config_public.json
with open(CONFIG_PATH, "w", encoding="utf-8") as f:
    json.dump({"status": "ready", "files": downloaded_files}, f, indent=4)

# üîπ –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤ GitHub Actions, —Å–æ–∑–¥–∞—ë–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
if os.getenv("GITHUB_ACTIONS"):
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ GitHub Actions...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ GH_TOKEN
    if not GH_TOKEN:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: GH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    else:
        subprocess.run(["zip", "-r", "downloaded_files.zip", DOWNLOAD_DIR], check=True)
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. –°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å upload —Å–∞–º.")

print("üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
