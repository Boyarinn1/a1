import os
import subprocess
import json

from b2sdk.v2 import B2Api, InMemoryAccountInfo

# üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2
info = InMemoryAccountInfo()
b2_api = B2Api(info)

S3_KEY_ID = os.getenv("S3_KEY_ID")
S3_APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
GH_TOKEN = os.getenv("GH_TOKEN")

RUNNING_IN_GITHUB = os.getenv("GITHUB_ACTIONS") == "true"

# –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
print(f"‚úÖ GH_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GH_TOKEN else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"‚úÖ S3_KEY_ID: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if S3_KEY_ID else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"‚úÖ S3_APPLICATION_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if S3_APPLICATION_KEY else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
print(f"‚úÖ S3_BUCKET_NAME: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if S3_BUCKET_NAME else '‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

if RUNNING_IN_GITHUB and not GH_TOKEN:
    raise RuntimeError("‚ùå GH_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ GitHub Actions!")

# –ü–µ—Ä–µ–¥–∞—ë–º GH_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ GitHub CLI
if GH_TOKEN:
    os.environ["GH_TOKEN"] = GH_TOKEN
    print("‚úÖ GH_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
else:
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: GH_TOKEN –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω! GitHub CLI –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")

if not S3_KEY_ID or not S3_APPLICATION_KEY or not S3_BUCKET_NAME:
    print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è S3_KEY_ID, S3_APPLICATION_KEY –∏–ª–∏ S3_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `set S3_KEY_ID=your_key_id` –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

print("üîÑ module1_preparation.py –∑–∞–ø—É—â–µ–Ω!")

if not GH_TOKEN:
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: GH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
else:
    os.environ["GH_TOKEN"] = GH_TOKEN

if not S3_KEY_ID or not S3_APPLICATION_KEY or not S3_BUCKET_NAME:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è S3_KEY_ID, S3_APPLICATION_KEY –∏–ª–∏ S3_BUCKET_NAME –Ω–µ –∑–∞–¥–∞–Ω—ã!")

try:
    b2_api.authorize_account("production", S3_KEY_ID, S3_APPLICATION_KEY)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2 —É—Å–ø–µ—à–Ω–∞!")
except Exception as e:
    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ B2: {e}")

# üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ bucket'–∞
try:
    bucket = b2_api.get_bucket_by_name(S3_BUCKET_NAME)
except Exception as e:
    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ bucket'–∞ {S3_BUCKET_NAME}: {e}")

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ –∏ –≤ `module2_publication.py`
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)


def clear_old_files():
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏."""
    print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ {DOWNLOAD_DIR}...")
    for file in os.listdir(DOWNLOAD_DIR):
        file_path = os.path.join(DOWNLOAD_DIR, file)
        os.remove(file_path)
    print("‚úÖ –ü–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞.")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏–∑ GitHub Actions
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏–∑ GitHub...")
    subprocess.run(["gh", "run", "delete", "downloaded_files"], check=False)
    print("‚úÖ –°—Ç–∞—Ä—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

def delete_old_artifact():
    print("üóëÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç downloaded_files...")
    result = subprocess.run(["gh", "api", "repos/OWNER/REPO/actions/artifacts"], capture_output=True, text=True)

    if "downloaded_files" in result.stdout:
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç downloaded_files...")
        subprocess.run(["gh", "api", "-X", "DELETE", "/repos/OWNER/REPO/actions/artifacts/ID"], check=False)
        print("‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç deleted_files —É–¥–∞–ª—ë–Ω.")
    else:
        print("‚ö†Ô∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç downloaded_files –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ.")


delete_old_artifact()

def download_new_files():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—É—é –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤ –∏–∑ B2."""
    print("üì• –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ B2...")
    json_file = None
    mp4_file = None

    for file_version, _ in bucket.ls("444/", recursive=True):
        file_name = file_version.file_name  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ FileVersion
        if file_name.endswith(".json"):
            json_file = file_name
            mp4_file = file_name.replace(".json", ".mp4")
            break

    if not json_file or not mp4_file:
        print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
        return

    print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º {json_file} –∏ {mp4_file}...")
    for file_name in [json_file, mp4_file]:
        local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_name))
        try:
            with open(local_path, "wb") as f:
                bucket.download_file_by_name(file_name).save(f)
            print(f"‚úÖ {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {local_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_name}: {e}")


def check_artifacts():
    print("üì• –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã...")
    result = subprocess.run(["gh", "api", "repos/${{ github.repository }}/actions/artifacts"], capture_output=True,
                            text=True)

    try:
        artifacts = json.loads(result.stdout)
        if not artifacts["artifacts"]:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
            return False
        for artifact in artifacts["artifacts"]:
            print(f"üìÇ –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {artifact['name']}")
        return True
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
        return False


if check_artifacts():
    restore_files_from_artifacts()
else:
    print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")


def restore_files_from_artifacts():
    print("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...")
    artifact_name = "downloaded_files"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    result = subprocess.run(["gh", "api", "repos/Boyarinn1/a1/actions/artifacts"], capture_output=True, text=True)

    if artifact_name in result.stdout:
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç {artifact_name} –Ω–∞–π–¥–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã...")
        os.makedirs("/home/runner/work/a1/a1/data/downloaded", exist_ok=True)
        subprocess.run(["gh", "run", "download", "--name", artifact_name], check=False)
        print("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
    else:
        print(f"‚ö†Ô∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç {artifact_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.")


restore_files_from_artifacts()


if __name__ == "__main__":
    clear_old_files()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥—Ä—É–ø–ø—É
    restore_files_from_artifacts()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    download_new_files()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ B2
