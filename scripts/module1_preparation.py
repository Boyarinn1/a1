import os
import json
import boto3
print(f"üõ† –í–µ—Ä—Å–∏—è boto3: {boto3.__version__}")


from botocore.exceptions import BotoCoreError, ClientError
from datetime import datetime
from dotenv import load_dotenv

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path)

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
os.makedirs(DOWNLOAD_DIR, exist_ok=True)


print(f"S3_ENDPOINT: {os.getenv('S3_ENDPOINT')}")
print(f"S3_BUCKET_NAME: {os.getenv('S3_BUCKET_NAME')}")
print(f"S3_KEY_ID: {os.getenv('S3_KEY_ID')}")
print(f"S3_APPLICATION_KEY: {os.getenv('S3_APPLICATION_KEY')}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
PROCESSED_DIR = "data/processed"
LOG_FILE = "logs/operation_log.txt"

# –ü–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø
SEARCH_FOLDERS = ["444/", "555/", "666/"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ B2 –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENDPOINT = os.getenv("S3_ENDPOINT")
BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
KEY_ID = os.getenv("S3_KEY_ID")
APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_message(message):
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    with open(LOG_FILE, "a") as log:
        log.write(f"[{datetime.now()}] {message}\n")
    print(message)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2
def create_b2_client():
    try:
        client = boto3.client(
            's3',
            endpoint_url=ENDPOINT,
            aws_access_key_id=KEY_ID,
            aws_secret_access_key=APPLICATION_KEY
        )
        log_message("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2.")
        return client
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ B2: {e}")
        raise

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ B2
def download_files(client, prefix=""):
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    try:
        response = client.list_objects_v2(Bucket=BUCKET_NAME, Prefix=prefix)
        if 'Contents' not in response:
            log_message("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
            return

        for obj in response['Contents']:
            key = obj['Key']
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã
            if key.endswith((".json", ".mp4", ".png")):
                local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(key))
                log_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤: {local_path}")
                client.download_file(BUCKET_NAME, key, local_path)
                log_message(f"–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {key}")
            else:
                log_message(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª: {key}")

    except (BotoCoreError, ClientError) as e:
        log_message(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ B2: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON
def process_json_file(json_path):
    os.makedirs(PROCESSED_DIR, exist_ok=True)
    try:
        with open(json_path, "r", encoding="utf-8") as file:
            data = json.load(file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all(k in data for k in ("title", "content")):
            log_message(f"–§–∞–π–ª {json_path} –ø—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        title = f"<b>{data['title']}</b>"
        content = data['content']
        post_text = f"{title}\n\n{content}"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        processed_path = os.path.join(PROCESSED_DIR, os.path.basename(json_path))
        with open(processed_path, "w", encoding="utf-8") as output_file:
            json.dump({"text": post_text, "poll": data.get("poll")}, output_file, indent=4, ensure_ascii=False)
        log_message(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {json_path}")

    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {json_path}: {e}")


def fetch_config_from_b2(client):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π config_public.json –∏–∑ B2.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å.
    """
    config_key = "config/config_public.json"
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

    try:
        client.download_file(BUCKET_NAME, config_key, local_config_path)
        with open(local_config_path, "r", encoding="utf-8") as config_file:
            config = json.load(config_file)
        log_message("–§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        return config
    except (BotoCoreError, ClientError, json.JSONDecodeError) as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ config_public.json: {e}")
        return {}

def update_config_in_b2(client, folder):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç config/config_public.json –≤ B2, –¥–æ–±–∞–≤–ª—è—è –ø–∞–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    config_key = "config/config_public.json"
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
    try:
        client.download_file(BUCKET_NAME, config_key, local_config_path)
        with open(local_config_path, "r", encoding="utf-8") as config_file:
            config = json.load(config_file)
        log_message(f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ config_public.json: {config}")
    except (BotoCoreError, ClientError, json.JSONDecodeError) as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ config_public.json: {e}")
        config = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config["publish"] = folder
    with open(local_config_path, "w", encoding="utf-8") as config_file:
        json.dump(config, config_file, indent=4)
    log_message(f"–§–∞–π–ª config_public.json –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {config}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ B2
    try:
        client.upload_file(local_config_path, BUCKET_NAME, config_key)
        log_message(f"–§–∞–π–ª {config_key} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2.")
        log_message(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ config_public.json: {config}")
    except (BotoCoreError, ClientError) as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {config_key} –≤ B2: {e}")

def find_ready_group(client):
    """
    –ò—â–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º generation_id (.json –∏ .mp4) –≤ –ø–∞–ø–∫–∞—Ö 444/, 555/, 666/.
    """
    for folder in ["444/", "555/", "666/"]:
        response = client.list_objects_v2(Bucket=BUCKET_NAME, Prefix=folder)
        if 'Contents' not in response:
            continue

        files = {}
        for obj in response['Contents']:
            key = obj['Key']
            name, ext = os.path.splitext(os.path.basename(key))
            if ext in (".json", ".mp4"):
                files.setdefault(name, set()).add(ext)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≥—Ä—É–ø–ø—ã
        for name, extensions in files.items():
            if {".json", ".mp4"} <= extensions:
                log_message(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤: {name} –≤ –ø–∞–ø–∫–µ {folder}")
                return folder, name  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–ø–∫—É –∏ –∏–º—è –≥—Ä—É–ø–ø—ã

    log_message("–ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return None, None


def update_config_in_b2(client, folder):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç config/config_public.json –≤ B2, –¥–æ–±–∞–≤–ª—è—è –ø–∞–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    config_key = "config/config_public.json"
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
    try:
        client.download_file(BUCKET_NAME, config_key, local_config_path)
        with open(local_config_path, "r", encoding="utf-8") as config_file:
            config = json.load(config_file)
    except (BotoCoreError, ClientError, json.JSONDecodeError) as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ config_public.json: {e}")
        config = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    config["publish"] = folder
    with open(local_config_path, "w", encoding="utf-8") as config_file:
        json.dump(config, config_file, indent=4)
    log_message(f"–§–∞–π–ª config_public.json –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {config}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ B2
    try:
        client.upload_file(local_config_path, BUCKET_NAME, config_key)
        log_message("–§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2.")
    except (BotoCoreError, ClientError) as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config_public.json –≤ B2: {e}")

def download_group(client, folder, group_name):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤ (.json –∏ .mp4) –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    """
    group_files = [f"{folder}{group_name}.json", f"{folder}{group_name}.mp4"]
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    for file_key in group_files:
        try:
            local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_key))
            log_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤: {local_path}")
            client.download_file(BUCKET_NAME, file_key, local_path)
            log_message(f"–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {file_key}")
        except Exception as e:
            log_message(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_key}: {e}")


def main():
    client = create_b2_client()

    # –ò—â–µ–º –≥–æ—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
    folder, group_name = find_ready_group(client)
    if folder and group_name:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –≥—Ä—É–ø–ø—ã
        download_group(client, folder, group_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ B2
        update_config_in_b2(client, folder)
    else:
        log_message("–ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    log_message("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

if __name__ == "__main__":
    main()


