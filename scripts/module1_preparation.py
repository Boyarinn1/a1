import os
import json
import boto3
from botocore.exceptions import BotoCoreError, ClientError
from datetime import datetime
from dotenv import load_dotenv

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path)

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "data", "downloaded")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ B2 –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENDPOINT = os.getenv("S3_ENDPOINT")
BUCKET_NAME = os.getenv("S3_BUCKET_NAME")
KEY_ID = os.getenv("S3_KEY_ID")
APPLICATION_KEY = os.getenv("S3_APPLICATION_KEY")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_message(message):
    print(message)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2
def create_b2_client():
    try:
        client = boto3.client(
            's3',
            endpoint_url=ENDPOINT,
            aws_access_key_id=KEY_ID,
            aws_secret_access_key=APPLICATION_KEY
        )
        log_message("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ B2.")
        return client
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ B2: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤
def find_ready_group(client):
    for folder in ["444/", "555/", "666/"]:
        response = client.list_objects_v2(Bucket=BUCKET_NAME, Prefix=folder)
        if 'Contents' not in response:
            continue

        files = {}
        for obj in response['Contents']:
            key = obj['Key']
            name, ext = os.path.splitext(os.path.basename(key))
            if ext in (".json", ".mp4"):
                files.setdefault(name, set()).add(ext)

        for name, extensions in files.items():
            if {".json", ".mp4"} <= extensions:
                log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤: {name} –≤ –ø–∞–ø–∫–µ {folder}")
                return folder, name

    log_message("‚ùå –ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return None, None

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤
def download_group(client, folder, group_name):
    group_files = [f"{folder}{group_name}.json", f"{folder}{group_name}.mp4"]
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)

    for file_key in group_files:
        try:
            local_path = os.path.join(DOWNLOAD_DIR, os.path.basename(file_key))
            log_message(f"üìÇ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å: {BUCKET_NAME}/{file_key}")
            client.download_file(BUCKET_NAME, file_key, local_path, ExtraArgs={"ChecksumMode": "NONE"})
            log_message(f"‚úÖ –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {file_key}")
        except Exception as e:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_key}: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ config_public.json
def fetch_config_from_b2(client):
    config_key = "config/config_public.json"
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

    try:
        log_message(f"üìÇ –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å config: {BUCKET_NAME}/{config_key}")
        client.download_file(BUCKET_NAME, config_key, local_config_path, ExtraArgs={"ChecksumMode": "NONE"})
        with open(local_config_path, "r", encoding="utf-8") as config_file:
            config = json.load(config_file)
        log_message("‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω.")
        return config
    except (BotoCoreError, ClientError, json.JSONDecodeError) as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ config_public.json: {e}")
        return {}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config_public.json
def update_config_in_b2(client, folder):
    config_key = "config/config_public.json"
    local_config_path = os.path.join(DOWNLOAD_DIR, "config_public.json")

    try:
        log_message(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ B2: {BUCKET_NAME}/{config_key}")
        client.download_file(BUCKET_NAME, config_key, local_config_path, ExtraArgs={"ChecksumMode": "NONE"})
        with open(local_config_path, "r", encoding="utf-8") as config_file:
            config = json.load(config_file)
        log_message(f"üìÑ –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ config_public.json: {config}")
    except (BotoCoreError, ClientError, json.JSONDecodeError) as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ config_public.json: {e}")
        config = {}

    config["publish"] = folder
    with open(local_config_path, "w", encoding="utf-8") as config_file:
        json.dump(config, config_file, indent=4)
    log_message(f"‚úÖ –§–∞–π–ª config_public.json –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {config}")

    try:
        client.upload_file(local_config_path, BUCKET_NAME, config_key)
        log_message("‚úÖ –§–∞–π–ª config_public.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ B2.")
    except (BotoCoreError, ClientError) as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config_public.json –≤ B2: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    client = create_b2_client()

    folder, group_name = find_ready_group(client)
    if folder and group_name:
        download_group(client, folder, group_name)
        update_config_in_b2(client, folder)
    else:
        log_message("‚ùå –ì–æ—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    log_message("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")

if __name__ == "__main__":
    main()
